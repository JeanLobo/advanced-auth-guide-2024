// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model Tenant {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  companies   Company[]
  userTenants UserTenant[]
}

model Company {
  id                     String        @id @default(cuid())
  name                   String // Nome Fantasia
  legal_name             String // Razão Social
  registration_type      String // Tipo de inscrição (CNPJ, CPF ou Estrangeiro)
  registration_number    String // Número de inscrição (CNPJ, CPF ou ID Estrangeiro)
  state_registration     String? // Inscrição Estadual
  municipal_registration String? // Inscrição Municipal (Se for CNPJ)
  suframa_registration   String? // Inscrição Suframa (Se for CNPJ)
  tax_regime             String? // Regime Tributário (Simples Nacional, Lucro Presumido, etc.)
  address_street         String? // Endereço: Rua
  address_number         String? // Endereço: Número
  address_complement     String? // Endereço: Complemento
  address_neighborhood   String? // Endereço: Bairro
  address_city           String? // Endereço: Cidade
  address_state          String? // Endereço: Estado (sigla)
  address_zip_code       String? // Endereço: CEP
  active                 Boolean       @default(true) // Indica se a Empresa está ativa
  logo                   String? // URL do logo da empresa 
  tenantId               String
  tenant                 Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  userCompanies          UserCompany[]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String? // Foto do avatar do usuário
  birthDate             DateTime? // Data de aniversário do usuário
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  userTenants           UserTenant[]
  userCompanies         UserCompany[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model UserTenant {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId])
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
